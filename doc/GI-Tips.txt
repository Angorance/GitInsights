- Trop/pas assez de mots dans les commits (médiane des mots)

	95-XX char: 'You are supposed to write a short description of the work that was done, not the complete report for the client nor an official mail to the intention of the head of the company. You have to be concise yet clear. We know it is a hard skill to master, but it is necessary to know when to stop in order to be the G.O.A.T. in commit messages redaction.'

	70-95 char: 'We see that you put some extra effort in your commit message redaction, that\'s cool and all, but maybe you\'re taking this "detailing" thing a bit too far. You and your colleagues will have to read those, so maybe try to ease off on the keyboard, and go get yourself a chocolate milk. You deserved it ;)'

	50-70 char: 'Congratulation, fellow programmer. You now belong to the elite in term of writing commit messages. The bug fix description has no more secrets to you. You can now wander in the vales of the Internet in order to spread the holy teaching. Keep your mind clear and your keys sharp. May the semi-colon be with you. Amen'

	25-50 char: 'Hey not bad, you\'re doing pretty god! But if you want to be the very best, like no one ever was, you still have to improve this legendary skill known as "write good commit messages". Maybe you were a bit vague in your message, or you missed a functionality/feature/fix/bug to comment. Keep on typing, you are close to excellence. #ThumbsUp'

	00-25 char: 'Come on, you can and have to do longer commit messages. It is a description of your work, not a trivial text sent with your favorite messaging app. You do not have to write a book, but give as many informations as possible on what was done. Your team will be thankfull and they event might consider inviting you for a drink for being the "commit redactor of the year" :)'

------------------------------------------------------------------------------------------------------------------
- Taille de commits (médiane)

	40-XX modif. : 'You love living dangerously... Making such big changes before committing can make you loose everything. Try making less changes per commit or making commits more often. Imagine a sunday afternoon, you, coding in front of your computer (behind it\'s way more difficult btw) and suddenly, after changing the core of your software, a T-Rex enters your room breaking your door with a high kick and eats your computer... No commit, no work done. Next time, you should commit more often, after little changes! :D'

	25-40 modif. : 'It is a bit risky to make so much changes per commit. But hey, if you like it, your move... The day you loose everything because you didn\'t commit your changes soon enough, don\'t come to me crying... Firstly because you don\'t know me, hence you won\'t be able to find me, and secondly because it\'s only your fault. Doing less code per commit isn\'t a bad idea. It allows you to better follow the evolution of the work and if you want to review your commits (or someone else want to), it\'s less in a row, better for morale.'

	15-25 modif. : 'Good work, you just found the middle ground between to much stuff per commit or too much commits for no stuff. It is easy to catch up and find what you did for each commits and there are not over 9000 commits for just changing the name of your toString method.'

	10-15 modif. : 'Hey, your changes per commit are a bit light! Thus for a good day of work, you end up having way too much commits. It\'s not that bad, but you can do a bit better and try making more significant changes before committing them. The thing is to find a good in between, not too much changes per commit and not too much commits for little changes... But you\'re not so far, keep it that way!'

	00-10 modif. : 'What the fuuuuuuuuuck man? Even my Grandma makes more changes per commit... I don\'t even know what to say! I mean, making a commit per line is not that good... When your colleagues pull the changes, if they want to catch up and read the commits, they will be lost in miserable changes and a tsunami of commits... Not so productive :/'

------------------------------------------------------------------------------------------------------------------
- Nbre de langages utilisé/masterisé (pourcentage d\'utilisation des langages), nbre de langages pour arriver à 75%
	
	8-X langages : 'WOW, ok, you are curious, that\'s good, but you know it\'s a sin (not a big one though, but still)? You are VERY versatile, but we doubt that you master every single language that you use. If that\'s the case, congratulation, you are the apex programmer. But otherwise, you might consider reducing your arsenal in order to better use your weapons. Sure a Swiss Knife is useful, but you\'ll still use a kitchen knife to chop your vegetables.'

	5-7 langages : 'You try to be versatile but man, maybe you should focus on a little less tools. It\'s good to know some languages, but it\'s way better to master a few languages. This way you\'ll have the knowledge to use a little bit of everything, mais you\'ll also be able to increase you productivity on the mastered tools. Your colleagues will even be impressed by how confident you\'ll look by smashing your keys frenetically, typing your bubble-sort method at the light of speed :)'

	3-4 langages : 'Welp, what do you expect us to say? You are pretty versatile as a programmer and you know what you are doing with your tools. That\'s a very appreciated set of skills that you have here. Try to keep using these main languages as you need/want, but don\'t restrain yourself to sometimes use other languages.'

	2   langages : 'Hey, we see that you are the proud expert of two wonderful languages. That\'s quite good but sometimes, curiosity isn\'t that bad as a sin, you\'re not restricted to use only these two tools. Try to add one or two other languages to your arsenal to increase your versatility. This kind of skill is very appreciated on the job market. Think about a domain in which you have some interest, or something complementary to the two you already know :)'

	1   langages : 'Most of your work is done with only one language, so there\'s two cases possible: Either you just created your account and did a very few projects with it, or you are an apex programmer in this particular language. In both cases, we encourage you to try out new languages, maybe check out a domain in which you are curious or not comfortable yet. But try to spare some time to keep on practicing your favorite language :)'
	
------------------------------------------------------------------------------------------------------------------
- Temps de fermeture d\'une issue (médiane de la durée)

	26-XX jours : 'Wow man, how was your trip to the East Siberian Taiga ecoregion? I hope it was fun because now, it\'s time to GET BACK TO WORK. No, really, getting issues done taking so much time... Your "working" with Candy Crush or what? Even Shakespare resolves issues more quickly...'

	10-25 jours : 'Imagine you are in a Safari and you meet with a lion. You run, right? Because you know it\'s your life or the lion dinner... Well, issues are quite similar. As long as you do nothing, they will follow you. And following issues are worse than being served as dinner for a lion, believe me. So just do it, work harder and close those issues!'

	3-9 jours : 'Hey, good rhythm. You resolve issues as well as Phil Collins play drums! Keep going on like that, your colleagues will love you for your efficiency and you won\'t be submerged by issues!'

	0-2 jours : 'Ow man, you are either an amazing genius or a careless dev. If you\'re part of the first type, go on and be super GitHuber! On the other hand, take time to really think for durable solutions instead of quickly solving the issues to get back to your Cookie Clicker game... An issue solved without thinking is another issue coming right up!'
